// <auto-generated />
using System;
using FlashcardsApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlashcardsApp.Migrations
{
    [DbContext(typeof(FlashcardsContext))]
    [Migration("20230720003541_RelationshipsFix")]
    partial class RelationshipsFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlashcardsApp.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Front")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reverse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeckId = 1,
                            Description = "Sausage is tasty",
                            Front = "Kiełbasa",
                            Reverse = "Sausage"
                        },
                        new
                        {
                            Id = 2,
                            DeckId = 1,
                            Description = "Sky is the limit",
                            Front = "Niebo",
                            Reverse = "Sky"
                        },
                        new
                        {
                            Id = 3,
                            DeckId = 2,
                            Description = "Mięso jest spoko",
                            Front = "Sausage",
                            Reverse = "Kiełbasa"
                        },
                        new
                        {
                            Id = 4,
                            DeckId = 2,
                            Description = "Limitem jest niebo",
                            Front = "Sky",
                            Reverse = "Niebo"
                        },
                        new
                        {
                            Id = 5,
                            DeckId = 3,
                            Description = "Yes, i do like sunflowers",
                            Front = "Ja",
                            Reverse = "Yes"
                        },
                        new
                        {
                            Id = 6,
                            DeckId = 1,
                            Description = "This year I turn 18!",
                            Front = "Rok",
                            Reverse = "Year"
                        },
                        new
                        {
                            Id = 7,
                            DeckId = 1,
                            Description = "Today at 6:15 we have a meeting",
                            Front = "Dziś",
                            Reverse = "Today"
                        },
                        new
                        {
                            Id = 8,
                            DeckId = 1,
                            Description = "walk on a road",
                            Front = "Iść",
                            Reverse = "Go"
                        },
                        new
                        {
                            Id = 9,
                            DeckId = 1,
                            Description = "Laugh at a picture",
                            Front = "Śmiać się",
                            Reverse = "Laugh"
                        },
                        new
                        {
                            Id = 10,
                            DeckId = 1,
                            Description = "My younger brother lives far away, but he comes home for Christmas.",
                            Front = "Daleko",
                            Reverse = "Far"
                        },
                        new
                        {
                            Id = 11,
                            DeckId = 1,
                            Description = "She is beautiful.",
                            Front = "Piękny",
                            Reverse = "Beautiful"
                        },
                        new
                        {
                            Id = 12,
                            DeckId = 1,
                            Description = "Ugly face",
                            Front = "Brzydki",
                            Reverse = "Ugly"
                        },
                        new
                        {
                            Id = 13,
                            DeckId = 1,
                            Description = "I live near the university.",
                            Front = "Blisko",
                            Reverse = "Near"
                        },
                        new
                        {
                            Id = 14,
                            DeckId = 1,
                            Description = "Glass of wine.",
                            Front = "Wino",
                            Reverse = "Wine"
                        },
                        new
                        {
                            Id = 15,
                            DeckId = 1,
                            Description = "Would you like a cup of tea?",
                            Front = "Herbata",
                            Reverse = "Tea"
                        },
                        new
                        {
                            Id = 16,
                            DeckId = 1,
                            Description = "The coffee pot is full of coffee.",
                            Front = "Kawa",
                            Reverse = "Coffee"
                        },
                        new
                        {
                            Id = 17,
                            DeckId = 1,
                            Description = "Beef for the main course.",
                            Front = "Wołowina",
                            Reverse = "Beef"
                        },
                        new
                        {
                            Id = 18,
                            DeckId = 2,
                            Description = "W tym roku będę miał 18 lat!",
                            Front = "Year",
                            Reverse = "Rok"
                        },
                        new
                        {
                            Id = 19,
                            DeckId = 2,
                            Description = "Dziś o 6:15 mamy spotkanie.",
                            Front = "Today",
                            Reverse = "Dziś"
                        },
                        new
                        {
                            Id = 20,
                            DeckId = 2,
                            Description = "Iść po drodze.",
                            Front = "Go",
                            Reverse = "Iść"
                        },
                        new
                        {
                            Id = 21,
                            DeckId = 2,
                            Description = "Śmiać się z samego siebie.",
                            Front = "Laugh",
                            Reverse = "Śmiać się"
                        },
                        new
                        {
                            Id = 22,
                            DeckId = 1,
                            Description = "Mój młodszy brat mieszka daleko stąd, ale przyjeżdża na te święta.",
                            Front = "Far",
                            Reverse = "Daleko"
                        },
                        new
                        {
                            Id = 23,
                            DeckId = 1,
                            Description = "Ona jest piękna.",
                            Front = "Beautiful",
                            Reverse = "Piękny"
                        },
                        new
                        {
                            Id = 24,
                            DeckId = 1,
                            Description = "Brzydka zagrywka.",
                            Front = "Ugly",
                            Reverse = "Brzydki"
                        },
                        new
                        {
                            Id = 25,
                            DeckId = 1,
                            Description = "Mieszkam blisko uniwersytetu.",
                            Front = "Near",
                            Reverse = "Blisko"
                        },
                        new
                        {
                            Id = 26,
                            DeckId = 1,
                            Description = "Czerwone wino jest lepsze niż białe.",
                            Front = "Wine",
                            Reverse = "Wino"
                        },
                        new
                        {
                            Id = 27,
                            DeckId = 1,
                            Description = "Czy chciałbyś szklankę herbaty?",
                            Front = "Tea",
                            Reverse = "Herbata"
                        },
                        new
                        {
                            Id = 28,
                            DeckId = 1,
                            Description = "Poproszę kawę z dwoma łyżkami cukru.",
                            Front = "Coffee",
                            Reverse = "Kawa"
                        },
                        new
                        {
                            Id = 29,
                            DeckId = 1,
                            Description = "Wołowina na danie główne.",
                            Front = "Beef",
                            Reverse = "Wołowina"
                        },
                        new
                        {
                            Id = 30,
                            DeckId = 3,
                            Description = " There are seven days in one week, and four full weeks in a month.",
                            Front = "Woche",
                            Reverse = "Week"
                        },
                        new
                        {
                            Id = 31,
                            DeckId = 3,
                            Description = "We met yesterday afternoon.",
                            Front = "Gestern",
                            Reverse = "Yesterday"
                        },
                        new
                        {
                            Id = 32,
                            DeckId = 3,
                            Description = "Can jump over.",
                            Front = "Können",
                            Reverse = "Can"
                        },
                        new
                        {
                            Id = 33,
                            DeckId = 3,
                            Description = "The person is using a computer to write an e-mail.",
                            Front = "Benutzen",
                            Reverse = "Use"
                        },
                        new
                        {
                            Id = 34,
                            DeckId = 3,
                            Description = "The couple laughs at the picture.",
                            Front = "Lachen",
                            Reverse = "Laugh"
                        },
                        new
                        {
                            Id = 35,
                            DeckId = 3,
                            Description = "The chef makes orange juice.",
                            Front = "Machen",
                            Reverse = "Make"
                        },
                        new
                        {
                            Id = 36,
                            DeckId = 3,
                            Description = "The tourists see the sunset.",
                            Front = "Sehen",
                            Reverse = "See"
                        },
                        new
                        {
                            Id = 37,
                            DeckId = 3,
                            Description = "The woman is looking at something far away.",
                            Front = "Weit",
                            Reverse = "Far"
                        },
                        new
                        {
                            Id = 38,
                            DeckId = 3,
                            Description = "Vegetables are good for you.",
                            Front = "Gut",
                            Reverse = "Good"
                        },
                        new
                        {
                            Id = 39,
                            DeckId = 3,
                            Description = "Why is his face so ugly.",
                            Front = "Hässlich",
                            Reverse = "Ugly"
                        },
                        new
                        {
                            Id = 40,
                            DeckId = 3,
                            Description = "I was given a very difficult task, but i managed to do it.",
                            Front = "Schwierig",
                            Reverse = "Difficult"
                        });
                });

            modelBuilder.Entity("FlashcardsApp.Entities.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Decks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatorId = 3,
                            Description = "Test123",
                            IsPrivate = false,
                            Title = "Polish to English vocab"
                        },
                        new
                        {
                            Id = 2,
                            CreatorId = 3,
                            Description = "Test123",
                            IsPrivate = false,
                            Title = "English to Polish vocab"
                        },
                        new
                        {
                            Id = 3,
                            CreatorId = 3,
                            Description = "Test123",
                            IsPrivate = false,
                            Title = "German to English vocab"
                        });
                });

            modelBuilder.Entity("FlashcardsApp.Entities.RevisionLog", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ease")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DeckId", "CardId");

                    b.HasIndex("CardId");

                    b.HasIndex("DeckId");

                    b.ToTable("RevisionLog");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DeckId = 1,
                            CardId = 1,
                            Date = new DateTime(2008, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ease = 2,
                            Stage = 1
                        },
                        new
                        {
                            UserId = 2,
                            DeckId = 1,
                            CardId = 1,
                            Date = new DateTime(2008, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ease = 2,
                            Stage = 1
                        },
                        new
                        {
                            UserId = 3,
                            DeckId = 1,
                            CardId = 2,
                            Date = new DateTime(2008, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ease = 2,
                            Stage = 1
                        });
                });

            modelBuilder.Entity("FlashcardsApp.Entities.Statistic", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CorrectGuesses")
                        .HasColumnType("int");

                    b.Property<int>("TotalGuesses")
                        .HasColumnType("int");

                    b.Property<int>("WrongGuesses")
                        .HasColumnType("int");

                    b.HasKey("Date", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Statistics", t =>
                        {
                            t.HasCheckConstraint("CK_TotalGuesses", "[TotalGuesses] = [CorrectGuesses] + [WrongGuesses]");
                        });

                    b.HasData(
                        new
                        {
                            Date = new DateTime(2008, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            CorrectGuesses = 0,
                            TotalGuesses = 0,
                            WrongGuesses = 0
                        },
                        new
                        {
                            Date = new DateTime(2008, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1,
                            CorrectGuesses = 1,
                            TotalGuesses = 1,
                            WrongGuesses = 0
                        },
                        new
                        {
                            Date = new DateTime(2008, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2,
                            CorrectGuesses = 0,
                            TotalGuesses = 1,
                            WrongGuesses = 1
                        },
                        new
                        {
                            Date = new DateTime(2008, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2,
                            CorrectGuesses = 0,
                            TotalGuesses = 0,
                            WrongGuesses = 0
                        },
                        new
                        {
                            Date = new DateTime(2008, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3,
                            CorrectGuesses = 0,
                            TotalGuesses = 0,
                            WrongGuesses = 0
                        },
                        new
                        {
                            Date = new DateTime(2008, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3,
                            CorrectGuesses = 0,
                            TotalGuesses = 1,
                            WrongGuesses = 1
                        });
                });

            modelBuilder.Entity("FlashcardsApp.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            PasswordSalt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            Username = "Michal15"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            PasswordSalt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            Username = "Krzychu7"
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            PasswordSalt = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            Username = "Admin111"
                        });
                });

            modelBuilder.Entity("FlashcardsApp.Entities.UserDeck", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DeckId");

                    b.HasIndex("DeckId");

                    b.ToTable("UserDecks");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DeckId = 1
                        },
                        new
                        {
                            UserId = 2,
                            DeckId = 1
                        },
                        new
                        {
                            UserId = 3,
                            DeckId = 1
                        },
                        new
                        {
                            UserId = 3,
                            DeckId = 2
                        });
                });

            modelBuilder.Entity("FlashcardsApp.Entities.Card", b =>
                {
                    b.HasOne("FlashcardsApp.Entities.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("FlashcardsApp.Entities.Deck", b =>
                {
                    b.HasOne("FlashcardsApp.Entities.User", "Creator")
                        .WithMany("OwnerDecks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("FlashcardsApp.Entities.RevisionLog", b =>
                {
                    b.HasOne("FlashcardsApp.Entities.Card", "Card")
                        .WithMany("RevisionLogs")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashcardsApp.Entities.Deck", "Deck")
                        .WithMany("RevisionLogs")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashcardsApp.Entities.User", "User")
                        .WithMany("RevisionLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardsApp.Entities.Statistic", b =>
                {
                    b.HasOne("FlashcardsApp.Entities.User", "User")
                        .WithMany("Statistics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardsApp.Entities.UserDeck", b =>
                {
                    b.HasOne("FlashcardsApp.Entities.Deck", "Deck")
                        .WithMany("UserDecks")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashcardsApp.Entities.User", "User")
                        .WithMany("UserDecks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardsApp.Entities.Card", b =>
                {
                    b.Navigation("RevisionLogs");
                });

            modelBuilder.Entity("FlashcardsApp.Entities.Deck", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("RevisionLogs");

                    b.Navigation("UserDecks");
                });

            modelBuilder.Entity("FlashcardsApp.Entities.User", b =>
                {
                    b.Navigation("OwnerDecks");

                    b.Navigation("RevisionLogs");

                    b.Navigation("Statistics");

                    b.Navigation("UserDecks");
                });
#pragma warning restore 612, 618
        }
    }
}
